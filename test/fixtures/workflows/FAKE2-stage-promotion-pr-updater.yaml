name: update stage promotion pull requests
on:
  pull_request:
    branches:
      - stage
    types: [closed]
concurrency:
  group: promotion
jobs:
  updateStagePromotionPrs:
    env:
      RELEASE_ENV: stage
      GH_USER_NAME: chainlink-k8s
      GH_USER_EMAIL: 8700084+chainlink-k8s@users.noreply.github.com
    runs-on: ubuntu-latest
    steps:
      - name: determine release env
        if: github.event.pull_request.merged == true
        run: |
          set -x
          echo "release_env=$RELEASE_ENV" >> $GITHUB_ENV

      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: updateStagePromotionPrs
        continue-on-error: true

      - if: github.event.pull_request.merged == true
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
        with:
          ref: sand
          fetch-depth: 0
          token: ${{ secrets.PR_BOT_TOKEN }}
      - name: pr updater
        if: github.event.pull_request.merged == true
        env:
          GITHUB_TOKEN: ${{ secrets.PR_BOT_TOKEN }}
        run: |
          set -x
          git config user.name $GH_USER_NAME
          git config user.email $GH_USER_EMAIL

          git fetch origin ${{ env.release_env }}:${{ env.release_env }}
          git checkout ${{ env.release_env }}

          git log stage --oneline -n 10

          is_ancestor=true

          stage_pr_branches=$(gh pr list --base stage --json "headRefName" --jq ".[].headRefName" | xargs)
          for stage_pr_branch in $stage_pr_branches; do
            echo "stage_pr_branch: $stage_pr_branch"
            git fetch origin $stage_pr_branch:$stage_pr_branch
            git checkout $stage_pr_branch

            # conflict resolution
            rev_list=$(git merge-tree $(git merge-base stage $stage_pr_branch) stage $stage_pr_branch | perl -0777ne 'print "$2,$3,$1\n" while(/their  [0-9]{6} [a-z0-9]{40} ([a-zA-Z0-9\/\-\.]+?\/.revision)\n[@\ \-0-9\+,]+\n\+<<<<<<< \.our\n\h([a-z0-9]{40})\n\+=======\n\+([a-z0-9]{40})\n\+>>>>>>> \.their/sg)')
            for i in ${rev_list}; do
              arr=(${i//,/ })
              echo "ours | theirs | pin_file: ${arr[0]} ${arr[1]} ${arr[2]}"
              git merge-base --is-ancestor "${arr[0]}" "${arr[1]}" && is_ancestor=true || is_ancestor=false
              [[ "${is_ancestor}" == "true" ]] && break
            done

            git log $stage_pr_branch --oneline -n 10

            echo "is_ancestor: ${is_ancestor}"
            if [[ "${is_ancestor}" == "true" ]]; then
              git merge stage -X ours --allow-unrelated-histories
            else
              git merge stage -X theirs --allow-unrelated-histories
            fi

            diff_files=$(git diff stage..$stage_pr_branch --name-only)
            if [[ -z "${diff_files}" ]]; then
              echo "diff_files is empty, closing pr"
              gh pr comment $stage_pr_branch -R ${{github.repository}} --body "Changes promoted in ${{ github.event.pull_request.html_url }}"
              gh pr close $stage_pr_branch
              ## delete closed PR branch
              git push origin ":${prod_pr_branch}"
              echo "diff_files:"
              echo "$diff_files"
            else 
              git push origin $stage_pr_branch -f
            fi
          done
      - name: prod pr check updater
        if: github.event.pull_request.merged == true
        run: |
          set -x
          prod_pr_branches=$(gh pr list --base prod --json "headRefName" --jq ".[].headRefName" | xargs)
          for prod_pr_branch in $prod_pr_branches; do
            run_json=$(gh run list -b "${prod_pr_branch}" -w "check prod promotion pull requests" --json "conclusion,databaseId")
            run_result=$(echo "${run_json}" | jq -r '.[0].conclusion')
            run_id=$(echo "${run_json}" | jq -r '.[0].databaseId')
            if [[ "${run_result}" == "failure" ]]; then
              gh run rerun "${run_id}" --failed
            fi
          done
